var documenterSearchIndex = {"docs":
[{"location":"api_reference/#compute_cost(x,-parameters)","page":"get_path_plot.jl","title":"compute_cost(x, parameters)","text":"","category":"section"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"This function compute the cost of the actual state using the current action a_t. The cost is the sum of the conributions regaring to the burden of a diseases quantifyed in DALYs and the implicated cost, related with the vaccination campaing.","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"According to the definition of DALY we compute this indicator with","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"    beginaligned\n        DALY \n            = \n                YLL + YLD\n        \n        YLL(t_k + 1) \n            =\n                int_t_k^t_k + 1\n                    m_1  (D(t) - D(t_k))\n                dt\n        \n        YLD(t_k + 1)\n            = \n                int_t_k^t_k + 1\n                    m_2 (I_S(t) - I_S(t_k))\n                dt\n        \n    endaligned","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"Then we estimate the cost due to the vaccine stock management and deploy of the underlying vaccination campaing by","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"    beginaligned\n        C_stock (t_k + 1)\n            =\n                int_t_k^t_k + 1\n                    C(K_t)\n                dt\n        \n        C_campaing(t_k + 1)\n            =\n                int_t_k^t_k + 1\n                    m_4 (X_vac(t) - X_vac(t_k))\n    endaligned","category":"page"},{"location":"api_reference/#get_interval_solution","page":"get_path_plot.jl","title":"get_interval_solution","text":"","category":"section"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"From a point of solution of SEIRVD model x a stock level k and the most recent parameters, this function evaluates the SEIRVD solution for possible vaccine control opt_policy in each sequence of time point of  time_ interval","category":"page"},{"location":"api_reference/#get_path_plot.jl","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"","category":"section"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"","category":"page"},{"location":"api_reference/#get_solution_path.jl","page":"get_path_plot.jl","title":"get_solution_path.jl","text":"","category":"section"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"","category":"page"},{"location":"api_reference/#get_stencil_projection.jl","page":"get_path_plot.jl","title":"get_stencil_projection.jl","text":"","category":"section"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"This function is implemented by computing","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"beginaligned\n    eta(t) = sup\n        \n            i t_i leq t\n     quad i in 12  dots M \nendaligned","category":"page"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"where the index i runs over the projected  delivery times t_i.","category":"page"},{"location":"api_reference/#get_stochastic_perturbation.jl","page":"get_path_plot.jl","title":"get_stochastic_perturbation.jl","text":"","category":"section"},{"location":"api_reference/#get_vaccine_action.jl","page":"get_path_plot.jl","title":"get_vaccine_action.jl","text":"","category":"section"},{"location":"api_reference/#get_vaccine_stock_coverage.jl","page":"get_path_plot.jl","title":"get_vaccine_stock_coverage.jl","text":"","category":"section"},{"location":"api_reference/#load_parameters.jl","page":"get_path_plot.jl","title":"load_parameters.jl","text":"","category":"section"},{"location":"api_reference/#rhs_evaluation.jl","page":"get_path_plot.jl","title":"rhs_evaluation.jl","text":"","category":"section"},{"location":"api_reference/#save_interval_solution.jl","page":"get_path_plot.jl","title":"save_interval_solution.jl","text":"","category":"section"},{"location":"api_reference/#save_parameters_json.jl","page":"get_path_plot.jl","title":"save_parameters_json.jl","text":"","category":"section"},{"location":"api_reference/#save_solution.jl","page":"get_path_plot.jl","title":"save_solution.jl","text":"","category":"section"},{"location":"api_reference/#References","page":"get_path_plot.jl","title":"References","text":"","category":"section"},{"location":"api_reference/","page":"get_path_plot.jl","title":"get_path_plot.jl","text":"\"Julia Programming for Operations Research\" by Changhyun Kwon and Youngdae Cho: This book focuses on using Julia for solving optimization problems and is suitable for readers with a background in operations research or mathematical optimization.\n\"Julia High Performance\" by Avik Sengupta: This book covers various techniques to write high-performance code in Julia, making the most of its just-in-time compilation and multiple dispatch features.\n\"Hands-On Design Patterns and Best Practices with Julia\" by Tom Kwong: This book introduces design patterns and best practices for writing maintainable and efficient code in Julia.\n\"Think Julia: How to Think Like a Computer Scientist\" by Ben Lauwens and Allen Downey: This beginner-friendly book takes a hands-on approach to learning Julia and covers fundamental programming concepts through practical examples and exercises.\n\"Learning Julia: Build high-performance applications for scientific computing\" by Anshul Joshi and Rahul Lakhanpal: This book provides an introduction to Julia for scientific computing and covers topics such as data manipulation, visualization, and parallel computing.\nWHO, A. (2020). WHO methods and data sources for life tables 1990â€“2019.","category":"page"},{"location":"preliminars/#Concepts","page":"Concepts","title":"Concepts","text":"","category":"section"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"VaccineStockManagement.jl is a julia tool module that approximate the optimal policies of a vaccine inventory to aim the control of the vaccine overage when the size ant time of vaccine delivieries was defined previously but the real values are perturbed stochastically. Additionally to modelling the evolution of diseasse follows the compartment SERIDV epidemic model.","category":"page"},{"location":"preliminars/#Vaccine-counter-epidemic-SEIRDX_{vac}-model","page":"Concepts","title":"Vaccine - counter - epidemic - SEIRDX_vac model","text":"","category":"section"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"We consider the epidemic model, given by the Ordinary Differential Equations system ","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"    beginaligned\n        S ^ prime = \n            mu hatN \n                + omega_V V \n                + delta_R R\n                - (lambda_f + mu + psi_V) S \n                \n        E ^ prime = \n            lambda_f S \n            + (1- epsilon) V - (mu + delta_E) E\n        \n        I_S ^ prime =\n            p delta_E E - (mu + alpha_S) I_S\n        \n        I_A ^ prime  = \n            (1- p)delta_E E - (mu + alpha_A) I_A\n        \n        R ^ prime = \n            (1- theta) alpha_S \n            + alpha_A I_A \n            -(mu + delta_R) R\n        \n        D ^ prime =\n            theta alpha_S I_S \n        \n        V ^ prime = \n            psi_V S \n                - \n                    (1 - epsilon ) lambda_f  \n                    + omega _V \n                    + mu\n                 V\n            \n        X_vac ^ prime = psi_V (S + E + I_A + R) \n        \n        lambda_f = \n            fracbeta_S I_S + beta_A I_AwidehatN\n        \n        widehatN(t) = \n                S(t) + E(t) + I_S(t) + I_A(t) + R(t) + D(t) + V(t)\n    endaligned","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"for each time t0 where S (Susceptible), E (Exposed), R (Recovered) , D (Death), I_A (Asymptomatic Infected ), I_S (Symptomatic Infected), V (vaccinated), X_vac (number of accumulative administered doses until t  The constants satisfies (TODO: define constants)","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"and the usual condition ","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"beginaligned\n    hatN_n = S +E+ I_A + I_S + R\nendaligned","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"and define ","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"beginaligned\n    lambda_f = beta_S I_S + beta_A I_A\n    psi(h) = 1 - e^-h (1- psi(h) mu) I_A^n \nendaligned","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"In addition, we consider a stock vaccination management. Let suppose a vaccine inventory with finite steps K (the steps in term of the deliveries), that is, if k represents the k-delivery of vaccine, k=1dotsK","category":"page"},{"location":"preliminars/#Discretization-SEIRDX_{vac}-model","page":"Concepts","title":"Discretization SEIRDX_vac model","text":"","category":"section"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"To generate an optimal inventory vaccine problem, as first step, we apply a discretization of the ODE system SEIRDVX_vac under the time-delivery sub intervals. Consider for each time sub-interval k  a grid time N_k partition of sub interval t_*^(k)t^*(k) We define","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"h_k= fract^*(k) - t_*^(k)N_k","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"If t_n^(k) denotes the time of the n step SEIR model for the k sub interval, then","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"t_n^(k) = nh_k in t_*^(k)t^*(k) quad quad k=1dots K","category":"page"},{"location":"preliminars/","page":"Concepts","title":"Concepts","text":"To validate the extremes, t_0^(k)=t_*^(k) and t_N_k^(k)=N_k h_k =t^*(k)","category":"page"},{"location":"#VaccineStockManagementWithMDPs.jl","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"","category":"section"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"    CurrentModule = VaccineStockManagementWithMDPs ","category":"page"},{"location":"#Concepts","page":"VaccineStockManagementWithMDPs.jl","title":"Concepts","text":"","category":"section"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"Pages = [\"preliminars.md\"]","category":"page"},{"location":"#compute_cost(x,-parameters)","page":"VaccineStockManagementWithMDPs.jl","title":"compute_cost(x, parameters)","text":"","category":"section"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"","category":"page"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"This function compute the cost of the actual state using the current action a_t. The cost is the sum of the conributions regaring to the burden of a diseases quantifyed in DALYs and the implicated cost, related with the vaccination campaing.","category":"page"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"According to the definition of DALY we compute this indicator with","category":"page"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"    beginaligned\n        DALY \n            = \n                YLL + YLD\n        \n        YLL(t_k + 1) \n            =\n                int_t_k^t_k + 1\n                    m_1  (D(t) - D(t_k))\n                dt\n        \n        YLD(t_k + 1)\n            = \n                int_t_k^t_k + 1\n                    m_2 (I_S(t) - I_S(t_k))\n                dt\n        \n    endaligned","category":"page"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"Then we estimate the cost due to the vaccine stock management and deploy of the underlying vaccination campaing by","category":"page"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"    beginaligned\n        C_stock (t_k + 1)\n            =\n                int_t_k^t_k + 1\n                    C(K_t)\n                dt\n        \n        C_campaing(t_k + 1)\n            =\n                int_t_k^t_k + 1\n                    m_4 (X_vac(t) - X_vac(t_k))\n    endaligned","category":"page"},{"location":"#get_interval_solution","page":"VaccineStockManagementWithMDPs.jl","title":"get_interval_solution","text":"","category":"section"},{"location":"#get_path_plot.jl","page":"VaccineStockManagementWithMDPs.jl","title":"get_path_plot.jl","text":"","category":"section"},{"location":"#get_solution_path.jl","page":"VaccineStockManagementWithMDPs.jl","title":"get_solution_path.jl","text":"","category":"section"},{"location":"#get_stochastic_perturbation.jl","page":"VaccineStockManagementWithMDPs.jl","title":"get_stochastic_perturbation.jl","text":"","category":"section"},{"location":"#get_vaccine_action.jl","page":"VaccineStockManagementWithMDPs.jl","title":"get_vaccine_action.jl","text":"","category":"section"},{"location":"#get_vaccine_stock_coverage.jl","page":"VaccineStockManagementWithMDPs.jl","title":"get_vaccine_stock_coverage.jl","text":"","category":"section"},{"location":"#load_parameters.jl","page":"VaccineStockManagementWithMDPs.jl","title":"load_parameters.jl","text":"","category":"section"},{"location":"#rhs_evaluation.jl","page":"VaccineStockManagementWithMDPs.jl","title":"rhs_evaluation.jl","text":"","category":"section"},{"location":"#save_interval_solution.jl","page":"VaccineStockManagementWithMDPs.jl","title":"save_interval_solution.jl","text":"","category":"section"},{"location":"#save_parameters_json.jl","page":"VaccineStockManagementWithMDPs.jl","title":"save_parameters_json.jl","text":"","category":"section"},{"location":"#References","page":"VaccineStockManagementWithMDPs.jl","title":"References","text":"","category":"section"},{"location":"","page":"VaccineStockManagementWithMDPs.jl","title":"VaccineStockManagementWithMDPs.jl","text":"\"Julia Programming for Operations Research\" by Changhyun Kwon and Youngdae Cho: This book focuses on using Julia for solving optimization problems and is suitable for readers with a background in operations research or mathematical optimization.\n\"Julia High Performance\" by Avik Sengupta: This book covers various techniques to write high-performance code in Julia, making the most of its just-in-time compilation and multiple dispatch features.\n\"Hands-On Design Patterns and Best Practices with Julia\" by Tom Kwong: This book introduces design patterns and best practices for writing maintainable and efficient code in Julia.\n\"Think Julia: How to Think Like a Computer Scientist\" by Ben Lauwens and Allen Downey: This beginner-friendly book takes a hands-on approach to learning Julia and covers fundamental programming concepts through practical examples and exercises.\n\"Learning Julia: Build high-performance applications for scientific computing\" by Anshul Joshi and Rahul Lakhanpal: This book provides an introduction to Julia for scientific computing and covers topics such as data manipulation, visualization, and parallel computing.\nWHO, A. (2020). WHO methods and data sources for life tables 1990â€“2019.","category":"page"}]
}
